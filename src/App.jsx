import React, { useState, useMemo, useRef } from "react";

// === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ===
const Section = ({ title, subtitle, children, right }) => (
  <section className="bg-white rounded-2xl shadow-sm border border-blue-200 p-6">
    <div className="flex items-start justify-between gap-4 mb-4">
      <div>
        <h2 className="text-xl font-semibold text-blue-800">{title}</h2>
        {subtitle && <p className="text-blue-500 text-sm mt-1">{subtitle}</p>}
      </div>
      {right}
    </div>
    {children}
  </section>
);

const Chip = ({ children }) => (
  <span className="px-2.5 py-1 rounded-full text-xs bg-blue-50 text-blue-700 border border-blue-200">
    {children}
  </span>
);

const Input = ({ value, onChange, placeholder, type = "text" }) => (
  <input
    value={value}
    onChange={(e) => onChange(e.target.value)}
    placeholder={placeholder}
    type={type}
    className="w-full rounded-xl border border-blue-300 focus:border-blue-500 focus:ring-4 focus:ring-blue-100 outline-none p-3 text-sm text-blue-900"
  />
);

const Textarea = ({ value, onChange, placeholder, rows = 10 }) => (
  <textarea
    value={value}
    onChange={(e) => onChange(e.target.value)}
    placeholder={placeholder}
    rows={rows}
    className="w-full rounded-xl border border-blue-300 focus:border-blue-500 focus:ring-4 focus:ring-blue-100 outline-none p-4 text-sm text-blue-900"
  />
);

const Button = ({ children, onClick, variant = "primary", disabled }) => {
  const styles = {
    primary:
      "bg-blue-600 text-white hover:bg-blue-700 disabled:bg-blue-300 disabled:cursor-not-allowed",
    outline:
      "border border-blue-400 text-blue-700 hover:bg-blue-50 disabled:opacity-50",
    ghost: "text-blue-700 hover:bg-blue-100",
    danger:
      "bg-rose-600 text-white hover:bg-rose-700 disabled:bg-rose-300 disabled:cursor-not-allowed",
  };
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={`inline-flex items-center justify-center gap-2 rounded-xl px-4 py-2 text-sm font-medium transition-colors ${styles[variant]}`}
    >
      {children}
    </button>
  );
};

const Tabs = ({ tabs, value, onChange }) => (
  <div className="flex flex-wrap items-center gap-2">
    {tabs.map((t) => (
      <button
        key={t.value}
        onClick={() => onChange(t.value)}
        className={`px-4 py-2 rounded-xl text-sm font-medium border transition-colors ${
          value === t.value
            ? "bg-blue-600 text-white border-blue-600"
            : "bg-white text-blue-700 border-blue-300 hover:bg-blue-50"
        }`}
      >
        {t.icon} {t.label}
      </button>
    ))}
  </div>
);

const Stat = ({ label, value }) => (
  <div className="bg-white border border-blue-200 rounded-xl p-3 text-center">
    <div className="text-xs text-blue-500">{label}</div>
    <div className="text-xl font-semibold text-blue-800">{value}</div>
  </div>
);

// === –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ ===
function tokenize(text) {
  return text
    .toLowerCase()
    .replace(/[^\p{L}\p{N}\s]+/gu, " ")
    .split(/\s+/)
    .filter(Boolean);
}

function countWords(tokens) {
  const map = new Map();
  tokens.forEach((t) => map.set(t, (map.get(t) || 0) + 1));
  return Array.from(map.entries()).sort((a, b) => b[1] - a[1]);
}

function simpleSentiment(tokens) {
  const posList = [
    // üá∑üá∫ –†—É—Å—Å–∫–∏–µ
    "—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ", "—É—Å–ø–µ—Ö", "—É—Å–ø–µ—à–Ω–æ", "—É–ª—É—á—à–µ–Ω–∏–µ", "–ø—Ä–æ—Ä—ã–≤",
    "–≤—ã–∏–≥—Ä—ã—à", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "—Ä–æ—Å—Ç", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    "—Å–æ–≥–ª–∞—Å–∏–µ", "–º–∏—Ä", "–ø–æ–∑–∏—Ç–∏–≤", "–¥–æ–≤–µ—Ä–∏–µ", "—Ä–∞–¥–æ—Å—Ç—å", "—É–ª—ã–±–∫–∞", "–ø–æ–º–æ—â—å",
    "—Ä–µ—à–µ–Ω–æ", "—Å–∏–ª—å–Ω—ã–π", "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "–≤—ã–≥–æ–¥–∞", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–Ω–∞–¥–µ–∂–Ω–æ",
    "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ", "—É—Å–∏–ª–∏–µ", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å",
    "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "—Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è", "–ø–æ–≤—ã—à–µ–Ω–∏–µ", "–ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏",

    // üá¨üáß English
    "good", "great", "excellent", "success", "successful", "positive",
    "improve", "growth", "progress", "benefit", "stable", "support", "peace",
    "trust", "smile", "achievement", "win", "profit", "strong", "safe", "hope",

    // üá∞üáø “ö–∞–∑–∞“õ—à–∞
    "–∂–∞“õ—Å—ã", "–∫–µ—Ä–µ–º–µ—Ç", "—Ç–∞–º–∞—à–∞", "—Å”ô—Ç—Ç—ñ", "–ø–∞–π–¥–∞–ª—ã", "”©—Å—É", "–¥–∞–º—É", "—Ç–∞–±—ã—Å",
    "–∂–µ—Ç—ñ—Å—Ç—ñ–∫", "—Å–µ–Ω—ñ–º", "—Å–∞–±—ã—Ä", "–æ“£", "–±–µ–∫–µ–º", "“õ–æ–ª–¥–∞—É", "“Ø–º—ñ—Ç"
  ];

  const negList = [
    // üá∑üá∫ –†—É—Å—Å–∫–∏–µ
    "–ø–ª–æ—Ö–æ", "–∫—Ä–∏–∑–∏—Å", "–ø—Ä–æ–≤–∞–ª", "–æ—à–∏–±–∫–∞", "–ø–æ—Ç–µ—Ä–∏", "—Å–ø–∞–¥", "—É–±—ã—Ç–æ–∫",
    "–æ–ø–∞—Å–Ω–æ", "—É–≥—Ä–æ–∑–∞", "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞", "—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ", "—Å–Ω–∏–∂–µ–Ω–∏–µ", "–æ—Å–ª–∞–±–ª–µ–Ω–∏–µ",
    "–≤–∑—Ä—ã–≤", "–∫–æ–Ω—Ñ–ª–∏–∫—Ç", "–Ω–µ–Ω–∞–≤–∏—Å—Ç—å", "—Å—Ç—Ä–∞—Ö", "—Ç—Ä–µ–≤–æ–≥–∞", "–Ω–µ–≥–∞—Ç–∏–≤", "–ø—Ä–æ–±–ª–µ–º–∞",
    "–æ–±–æ—Å—Ç—Ä–µ–Ω–∏–µ", "–∞—Ç–∞–∫–∞", "–∞–≥—Ä–µ—Å—Å–∏—è", "–∞–≤–∞—Ä–∏—è", "—Ö–∞–æ—Å", "—Å—Ä—ã–≤", "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ",
    "–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–≤—Ä–µ–¥", "—É—â–µ—Ä–±", "–∑–ª–æ—Å—Ç—å", "–∫—Ä–∏–∑–∏—Å–Ω—ã–π", "—É—Ö—É–¥—à–µ–Ω–∏–µ",

    // üá¨üáß English
    "bad", "worse", "worst", "fail", "failure", "loss", "threat", "risk",
    "crisis", "danger", "decline", "fall", "attack", "aggression", "hate",
    "problem", "negative", "unstable", "collapse", "conflict", "fear",
    "mistake", "error", "weak", "decrease", "damage",

    // üá∞üáø “ö–∞–∑–∞“õ—à–∞
    "–∂–∞–º–∞–Ω", "–Ω–∞—à–∞—Ä", "–∑–∏—è–Ω", "“õ–∞—É—ñ–ø", "“õ“±–ª–¥—ã—Ä–∞—É", "“õ–∏—ã–Ω", "–º—ñ–Ω", "—Ç–µ—Ä—ñ—Å",
    "—à—ã“ì—ã–Ω", "“õ–∞—É—ñ–ø—Ç—ñ", "–ø—Ä–æ–±–ª–µ–º–∞", "—Ç”ô—É–µ–∫–µ–ª", "–∞–≥—Ä–µ—Å—Å–∏—è", "—Ç”©–º–µ–Ω–¥–µ—É",
    "—É–∞–π—ã–º", "“õ–æ—Ä“õ—ã–Ω—ã—à", "–¥–∞“ì–¥–∞—Ä—ã—Å", "—Ç”©–±–µ–ª–µ—Å", "–¥–∞—É", "–∑–∏—è–Ω–¥—ã"
  ];

  let pos = 0,
    neg = 0;
  tokens.forEach((t) => {
    if (posList.includes(t)) pos++;
    if (negList.includes(t)) neg++;
  });

  const score = pos - neg;
  return score > 1 ? "–ü–æ–∑–∏—Ç–∏–≤" : score < -1 ? "–ù–µ–≥–∞—Ç–∏–≤" : "–ù–µ–π—Ç—Ä–∞–ª—å";
}

// === –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ===
export default function App() {
  const [tab, setTab] = useState("analysis");

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
  const [text, setText] = useState("");
  const [fileName, setFileName] = useState("");
  const fileRef = useRef();

  const tokens = useMemo(() => tokenize(text), [text]);
  const topWords = useMemo(() => countWords(tokens).slice(0, 10), [tokens]);
  const sentiment = useMemo(() => simpleSentiment(tokens), [tokens]);

  // –¢–µ–∑–∞—É—Ä—É—Å
  const [terms, setTerms] = useState([]);
  const [term, setTerm] = useState("");
  const [syn, setSyn] = useState("");

  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ü—Å–µ—Ç–µ–π (–¥–µ–º–æ)
  const [platform, setPlatform] = useState("twitter");
  const [query, setQuery] = useState("");
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(false);

  function mockPosts() {
    const demo = Array.from({ length: 6 }).map((_, i) => ({
      id: i,
      author: `user_${i}`,
      text: `–î–µ–º–æ-–ø–æ—Å—Ç #${i + 1} (${platform}): "${query || "–≤–æ–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"}"`,
      engagement: Math.floor(Math.random() * 400),
      date: new Date(Date.now() - i * 3600_000).toLocaleString(),
    }));
    return demo;
  }

  function fetchPosts() {
    setLoading(true);
    setTimeout(() => {
      setPosts(mockPosts());
      setLoading(false);
    }, 800);
  }

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã
  const [patterns, setPatterns] = useState([]);
  function findPatterns() {
    const map = new Map();
    posts.forEach((p) =>
      tokenize(p.text).forEach((w) => map.set(w, (map.get(w) || 0) + 1))
    );
    const result = Array.from(map.entries())
      .filter(([_, c]) => c > 1)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10);
    setPatterns(result);
  }

  return (
    <div className="min-h-screen bg-blue-50">
      <header className="bg-blue-700 text-white p-4 sticky top-0 shadow-md">
        <h1 className="text-lg font-semibold">InfoOps ‚Äî –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</h1>
      </header>

      <main className="max-w-6xl mx-auto p-6 space-y-6">
        <Tabs
          tabs={[
            { value: "analysis", label: "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", icon: "üìù" },
            { value: "social", label: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ü—Å–µ—Ç–µ–π", icon: "üåê" },
            { value: "thesaurus", label: "–¢–µ–∑–∞—É—Ä—É—Å", icon: "üß©" },
            { value: "patterns", label: "–ü–∞—Ç—Ç–µ—Ä–Ω—ã", icon: "üìà" },
          ]}
          value={tab}
          onChange={setTab}
        />

        {/* === –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ === */}
        {tab === "analysis" && (
          <Section title="–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞" subtitle="–ó–∞–≥—Ä—É–∑–∏—Ç–µ .txt –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç">
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <Textarea
                  value={text}
                  onChange={setText}
                  placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç..."
                  rows={14}
                />
                <div className="mt-2 flex gap-2">
                  <Button variant="outline" onClick={() => fileRef.current.click()}>
                    üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å
                  </Button>
                  <input
                    ref={fileRef}
                    type="file"
                    accept=".txt"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (!file) return;
                      setFileName(file.name);
                      const reader = new FileReader();
                      reader.onload = () => setText(reader.result);
                      reader.readAsText(file, "utf-8");
                    }}
                    className="hidden"
                  />
                  <Button variant="ghost" onClick={() => setText("")}>
                    üßπ –û—á–∏—Å—Ç–∏—Ç—å
                  </Button>
                </div>
                {fileName && (
                  <p className="text-xs text-blue-600 mt-1">–§–∞–π–ª: {fileName}</p>
                )}
              </div>

              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-3">
                  <Stat label="–°–ª–æ–≤–∞" value={tokens.length} />
                  <Stat label="–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ" value={new Set(tokens).size} />
                  <Stat label="–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å" value={sentiment} />
                </div>

                <div className="bg-white border border-blue-200 rounded-xl p-4">
                  <h3 className="text-blue-800 font-semibold mb-2 text-sm">
                    üîù –¢–æ–ø-—Å–ª–æ–≤–∞
                  </h3>
                  <ul className="text-sm text-blue-900 space-y-1">
                    {topWords.map(([w, c], i) => (
                      <li key={i}>
                        {i + 1}. {w} ‚Äî {c}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          </Section>
        )}

        {/* === –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ü—Å–µ—Ç–µ–π === */}
        {tab === "social" && (
          <Section
            title="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ü—Å–µ—Ç–µ–π (–¥–µ–º–æ)"
            subtitle="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–±–æ—Ä–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
          >
            <div className="grid md:grid-cols-4 gap-4 mb-4">
              <select
                value={platform}
                onChange={(e) => setPlatform(e.target.value)}
                className="rounded-xl border border-blue-300 p-3 text-sm"
              >
                <option value="twitter">Twitter/X</option>
                <option value="telegram">Telegram</option>
                <option value="facebook">Facebook</option>
              </select>
              <Input
                value={query}
                onChange={setQuery}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å..."
              />
              <Button onClick={fetchPosts} disabled={loading}>
                {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "üîé –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã"}
              </Button>
            </div>

            {posts.length > 0 ? (
              <div className="grid md:grid-cols-2 gap-4">
                {posts.map((p) => (
                  <div
                    key={p.id}
                    className="border border-blue-200 rounded-xl bg-white p-4"
                  >
                    <div className="flex justify-between text-sm text-blue-500">
                      <span>@{p.author}</span>
                      <Chip>{p.engagement} ‚ù§</Chip>
                    </div>
                    <p className="text-blue-900 mt-2">{p.text}</p>
                    <p className="text-xs text-blue-400 mt-2">{p.date}</p>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-sm text-blue-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–æ—Å—Ç—ã.</p>
            )}
          </Section>
        )}

        {tab === "thesaurus" && (
  <Section
    title="–¢–µ–∑–∞—É—Ä—É—Å"
    subtitle="–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ —Å–∏–Ω–æ–Ω–∏–º—ã –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≥–æ—Ç–æ–≤—É—é –±–∞–∑—É"
    right={
      <div className="flex gap-2">
        {/* –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã */}
        <Button
          variant="outline"
          onClick={() => {
            const blob = new Blob([JSON.stringify(terms, null, 2)], {
              type: "application/json",
            });
            const url = URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "thesaurus.json";
            a.click();
            URL.revokeObjectURL(url);
          }}
        >
          ‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç JSON
        </Button>

        {/* –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã */}
        <label className="border border-blue-300 rounded-xl px-3 py-2 text-sm cursor-pointer hover:bg-blue-50">
          ‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç JSON
          <input
            type="file"
            accept="application/json"
            className="hidden"
            onChange={(e) => {
              const file = e.target.files?.[0];
              if (!file) return;
              const reader = new FileReader();
              reader.onload = () => {
                try {
                  const data = JSON.parse(reader.result);
                  if (Array.isArray(data)) setTerms(data);
                } catch {
                  alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞");
                }
              };
              reader.readAsText(file);
            }}
          />
        </label>
      </div>
    }
  >
    {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
    <div className="grid md:grid-cols-3 gap-4 mb-4">
      <Input value={term} onChange={setTerm} placeholder="–¢–µ—Ä–º–∏–Ω" />
      <Input value={syn} onChange={setSyn} placeholder="–°–∏–Ω–æ–Ω–∏–º—ã" />
      <Button
        onClick={() => {
          if (!term.trim()) return;
          setTerms((p) => [...p, { term, syn }]);
          setTerm("");
          setSyn("");
        }}
      >
        ‚ûï –î–æ–±–∞–≤–∏—Ç—å
      </Button>
    </div>

    {/* –¢–∞–±–ª–∏—Ü–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º */}
    <div className="bg-white border border-blue-200 rounded-xl p-4">
      {terms.length === 0 ? (
        <p className="text-sm text-blue-500">–ü–æ–∫–∞ –ø—É—Å—Ç–æ</p>
      ) : (
        <table className="w-full text-sm text-blue-900">
          <thead>
            <tr className="text-left text-blue-500">
              <th>–¢–µ—Ä–º–∏–Ω</th>
              <th>–°–∏–Ω–æ–Ω–∏–º—ã</th>
              <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
            </tr>
          </thead>
          <tbody>
            {terms.map((t, i) => (
              <tr key={i} className="border-t border-blue-100">
                <td className="py-1">{t.term}</td>
                <td className="py-1">{t.syn}</td>
                <td className="py-1">
                  <Button
                    variant="danger"
                    onClick={() =>
                      setTerms((prev) => prev.filter((_, idx) => idx !== i))
                    }
                  >
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  </Section>
)}

{/* === –ü–∞—Ç—Ç–µ—Ä–Ω—ã (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) === */}
{tab === "patterns" && (
  <Section
    title="–ü–∞—Ç—Ç–µ—Ä–Ω—ã"
    subtitle="–ü–æ–∏—Å–∫ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑ –≤ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö"
  >
    {/* –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ */}
    <Button
      onClick={findPatterns}
      disabled={posts.length === 0}
      variant="outline"
    >
      üöÄ –ù–∞–π—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    </Button>

    {/* –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö */}
    {posts.length === 0 ? (
      <p className="text-sm text-blue-500 mt-4">
        ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ üåê
        <b> ¬´–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ü—Å–µ—Ç–µ–π¬ª</b>.
      </p>
    ) : (
      <>
        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ */}
        {patterns.length > 0 ? (
          <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-3 mt-4">
            {patterns.map(([phrase, count], i) => (
              <div
                key={i}
                className="bg-white border border-blue-200 rounded-xl p-4 text-center"
              >
                <div className="text-blue-800 font-medium">{phrase}</div>
                <div className="text-sm text-blue-500">
                  –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {count}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-sm text-blue-500 mt-4">
            üìä –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Å–∞–º—ã–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ –∏
            –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
          </p>
        )}
      </>
    )}
  </Section>
)}
      </main>

      <footer className="bg-blue-700 text-white text-center py-3 text-xs mt-6">
        InfoOps ¬© 2025 ‚Äî –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      </footer>
    </div>
  );
}
